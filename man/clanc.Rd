% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/clanc-fit.R
\name{clanc}
\alias{clanc}
\alias{clanc.default}
\alias{clanc.data.frame}
\alias{clanc.matrix}
\alias{clanc.formula}
\alias{clanc.recipe}
\title{Calculate centroids from expression data using the ClaNC algorithm}
\usage{
clanc(x, ...)

\method{clanc}{default}(x, ...)

\method{clanc}{data.frame}(x, y, active, priors, ...)

\method{clanc}{matrix}(x, y, active, priors, ...)

\method{clanc}{formula}(formula, data, active, priors, ...)

\method{clanc}{recipe}(x, data, active, priors, ...)
}
\arguments{
\item{x}{Depending on the context:
\itemize{
\item A \strong{data frame} of expression.
\item A \strong{matrix} of expression.
\item A \strong{recipe} specifying a set of preprocessing steps
created from \code{\link[recipes:recipe]{recipes::recipe()}}.
\item An \strong{ExpressionSet}.
\item A \strong{SummarizedExperiment} with \code{assay} containing expression.
}

Expression should be library-size corrected, but not scaled.

If supplying a \strong{data frame}, \emph{matrix}_, \strong{ExpressionSet},
\strong{SummarizedExperiment}, the rows should represent genes, and the columns
should represent samples (as is standard for expression data). The column
names should be sample IDs, while the row names should be gene IDs.

If a \strong{recipe} is provided, the data should have genes as
columns (to match the formula provided to the recipe.)}

\item{...}{Not currently used, but required for extensibility.}

\item{active}{Either a single number or a numeric vector equal to the length
of the number of unique class labels. Represents the number class-specific
genes that should be selected for a centroid. Note that different numbers
of genes can be selected for each class. See details.

When \code{x} is an \strong{ExpressionSet} or \strong{SummarizedExperiment}, \code{active} can
additionally by the name of the column in \code{pData(x)} or \code{colData(x)} that
contains the numeric vector}

\item{priors}{Can take a variety of values:
\itemize{
\item "equal" - each class has an equal prior
\item "class" - each class has a prior equal to its frequency in the training
set
\item A numeric vector with length equal to number of classes
}

When \code{x} is an \strong{ExpressionSet} or \strong{SummarizedExperiment}, \code{active} can
additionally by the name of the column in \code{pData(x)} or \code{colData(x)} that
contains the numeric vector}

\item{formula}{A formula specifying the classes on the left-hand side,
and the predictor terms on the right-hand side.}

\item{data}{When a \strong{recipe} or \strong{formula} is used, \code{data} is specified as:
\itemize{
\item A \strong{data frame} containing both expression and classes, where columns
are the genes or class, and rows are the samples.
}}

\item{class}{When \code{x} is a \strong{data frame} or \strong{matrix}, \code{class} contains
class labels with the form of either:
\itemize{
\item A \strong{data frame} with 1 factor column
\item A factor \strong{vector}.
}

When \code{x} is an \strong{ExpressionSet} or \strong{SummarizedExperiment}, \code{class} is the
name of the column in \code{pData(x)} or \code{colData(x)} that contains classes as a
factor.}

\item{assay}{When a \strong{SummarizedExperiment} is used, the index or name of
the assay}
}
\value{
A \code{clanc} object.
}
\description{
Calculate centroids from expression data using the ClaNC algorithm
}
\details{
The original description of ClaNC can be found
\href{10.1093/bioinformatics/bti681}{here}

While \code{active} sets the number of class-specific genes, each centroid will
have more than that number of genes. To explain by way of example, if \code{active = 5} and there are 3 classes, each centroid will have 15 genes, with 5 of
those genes being particular to a given class. If these genes are 'active' in
that class, their values will be the mean of the class. If the genes are not
active in that given class, their values will be the overall expression of
the given gene across all classes.
}
\examples{
predictors <- mtcars[, -1]
outcome <- mtcars[, 1]

# XY interface
mod <- clanc(predictors, outcome)

# Formula interface
mod2 <- clanc(mpg ~ ., mtcars)

# Recipes interface
library(recipes)
rec <- recipe(mpg ~ ., mtcars)
rec <- step_log(rec, disp)
mod3 <- clanc(rec, mtcars)

}
